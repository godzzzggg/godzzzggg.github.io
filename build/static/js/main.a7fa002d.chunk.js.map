{"version":3,"sources":["constant/theme.ts","themes/styled.ts","themes/makeTheme.tsx","contexts/theme.tsx","themes/black.ts","themes/index.tsx","themes/white.ts","themes/orange.ts","themes/mintchoco.ts","utils/colors.ts","components/theme/icon.tsx","components/theme/index.tsx","pages/main/index.tsx","pages/introduce/index.tsx","pages/projects/index.tsx","router/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["THEMES","Object","freeze","DEFAULT","WHITE","BLACK","ORANGE","MintChoco","makeTheme","styled","_styled","ThemeProvider","theme","children","ThemeContext","createContext","state","ThemeConstant","actions","setTheme","useState","value","_theme","Provider","ThemeConsumer","Consumer","ThemeStyleProvider","colors","fontColor","backgroundColor","Themes","Default","Black","White","Orange","complementaryColor","hex_code","hex_to_int","parseInt","replace","g","b","getColor","n","toString","padStart","ThemeIcon","onClick","Icon","div","BackgroundColor","FontColor","SelectTheme","entries","themes","slice","theme_list","setThemeList","ThemeIconList","length","IconContainer","map","key","temp_list","filter","k","Main","MainContainer","HoverText","ButtonContainer","Button","Link","hover_text","setText","buttons","title","href","hover","onMouseLeave","btn","i","to","onMouseOver","onMouseOut","Projects","Router","path","component","exact","Introduce","child","Container","props","display","justifyContent","alignItems","width","height","color","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7fa002d.chunk.js","sourcesContent":["const THEMES = Object.freeze({\r\n  DEFAULT: 'Black',\r\n  WHITE: 'White',\r\n  BLACK: 'Black',\r\n  ORANGE: 'Orange',\r\n  MintChoco: 'MintChoco',\r\n});\r\n\r\nexport default THEMES;\r\n","import { Theme } from \"@emotion/react\";\r\nimport { makeTheme } from \"./makeTheme\";\r\nimport ThemeType from \"./type\";\r\n\r\nexport default makeTheme<Theme, ThemeType>();\r\n","import type { CreateStyledComponent, StyledOptions } from '@emotion/styled';\r\nimport type { FilteringStyledOptions } from '@emotion/styled/types/base';\r\nimport type { PropsOf } from '@emotion/react';\r\nimport { ThemeProvider as BaseThemeProvider } from '@emotion/react';\r\nimport _styled from \"@emotion/styled\";\r\n\r\n// emotion 11\r\nexport interface CreateStyled<Theme> {\r\n  <\r\n    C extends React.ComponentType<React.ComponentProps<C>>,\r\n    ForwardedProps extends keyof React.ComponentProps<\r\n      C\r\n    > = keyof React.ComponentProps<C>\r\n    >(\r\n    component: C,\r\n    options: FilteringStyledOptions<React.ComponentProps<C>, ForwardedProps>\r\n  ): CreateStyledComponent<\r\n    Pick<PropsOf<C>, ForwardedProps> & {\r\n      theme?: Theme\r\n      as?: React.ElementType\r\n    }\r\n  >\r\n\r\n  <C extends React.ComponentType<React.ComponentProps<C>>>(\r\n    component: C,\r\n    options?: StyledOptions<React.ComponentProps<C>>\r\n  ): CreateStyledComponent<\r\n    PropsOf<C> & {\r\n      theme?: Theme\r\n      as?: React.ElementType\r\n    }\r\n  >\r\n\r\n  <\r\n    Tag extends keyof JSX.IntrinsicElements,\r\n    ForwardedProps extends keyof JSX.IntrinsicElements[Tag] = keyof JSX.IntrinsicElements[Tag]\r\n    >(\r\n    tag: Tag,\r\n    options: FilteringStyledOptions<JSX.IntrinsicElements[Tag], ForwardedProps>\r\n  ): CreateStyledComponent<\r\n    { theme?: Theme; as?: React.ElementType },\r\n    Pick<JSX.IntrinsicElements[Tag], ForwardedProps>\r\n  >\r\n\r\n  <Tag extends keyof JSX.IntrinsicElements>(\r\n    tag: Tag,\r\n    options?: StyledOptions<JSX.IntrinsicElements[Tag]>\r\n  ): CreateStyledComponent<\r\n    { theme?: Theme; as?: React.ElementType },\r\n    JSX.IntrinsicElements[Tag]\r\n  >\r\n}\r\n\r\nexport type StyledTags<Theme> = {\r\n  [Tag in keyof JSX.IntrinsicElements]: CreateStyledComponent<\r\n    {\r\n      theme?: Theme\r\n      as?: React.ElementType\r\n    },\r\n    JSX.IntrinsicElements[Tag]\r\n  >\r\n}\r\n\r\ntype MergedTheme<BaseTheme extends object, Theme extends object> = BaseTheme & Theme;\r\n\r\nexport function makeTheme<BaseTheme extends object, Theme extends object>() {\r\n  type NewTheme = MergedTheme<BaseTheme, Theme>;\r\n\r\n  const styled = _styled as CreateStyled<NewTheme> & StyledTags<NewTheme>;\r\n  const ThemeProvider: React.FC<{ theme: NewTheme }> = ({ theme, children }) => (\r\n    <BaseThemeProvider theme={theme}>\r\n      {children}\r\n    </BaseThemeProvider>\r\n  );\r\n\r\n  return { styled, ThemeProvider };\r\n}\r\n","import { createContext, ReactElement, useState } from \"react\";\r\nimport ThemeConstant from \"@/constant/theme\";\r\nimport _theme from \"@/themes/styled\";\r\n\r\nconst ThemeContext = createContext<any>({\r\n  styled: {},\r\n  state: { theme: ThemeConstant.DEFAULT },\r\n  actions: { setTheme: () => {} },\r\n});\r\n\r\ntype ProviderProps = {\r\n  children: ReactElement | ReactElement[]\r\n}\r\n\r\nconst ThemeProvider = ({ children }: ProviderProps) => {\r\n  const [theme, setTheme] = useState(ThemeConstant.DEFAULT);\r\n  const value = {\r\n    styled: _theme.styled,\r\n    state: { theme },\r\n    actions: { setTheme },\r\n  };\r\n  return (\r\n    <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>\r\n  );\r\n};\r\n\r\nconst { Consumer: ThemeConsumer } = ThemeContext;\r\nconst { ThemeProvider: ThemeStyleProvider } = _theme;\r\nexport { ThemeProvider, ThemeConsumer, ThemeStyleProvider };\r\n\r\nexport default ThemeContext;\r\n","import { ThemeType } from \"./index\";\r\n\r\nconst theme: ThemeType = {\r\n  colors: {\r\n    fontColor: '#ffffff',\r\n    backgroundColor: '#1e1e1e',\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","import ThemeType from \"./type\";\r\nimport Black from \"./black\";\r\nimport White from \"./white\";\r\nimport Orange from \"./orange\";\r\nimport MintChoco from \"./mintchoco\";\r\n\r\nexport type { ThemeType };\r\n\r\nconst Themes: { [index: string]: ThemeType } = {\r\n  Default: Black,\r\n  Black,\r\n  White,\r\n  Orange,\r\n  MintChoco,\r\n};\r\n\r\nexport default Themes;\r\n","import { ThemeType } from \"./index\";\r\n\r\nconst theme: ThemeType = {\r\n  colors: {\r\n    fontColor: '#1e1e1e',\r\n    backgroundColor: '#ffffff',\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","import { ThemeType } from \"./index\";\r\n\r\nconst theme: ThemeType = {\r\n  colors: {\r\n    fontColor: '#f38748',\r\n    backgroundColor: '#ffffff',\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","import { ThemeType } from \"./index\";\r\n\r\nconst theme: ThemeType = {\r\n  colors: {\r\n    fontColor: '#62594d',\r\n    backgroundColor: '#b5e3d8',\r\n  }\r\n};\r\n\r\nexport default theme;\r\n","// 보색\r\nconst complementaryColor = (hex_code: string) => {\r\n  const hex_to_int = parseInt(hex_code.replace('#', ''), 16);\r\n  const r = (hex_to_int >> 16) & 0xFF;\r\n  const g = (hex_to_int >> 8) & 0xFF;\r\n  const b = hex_to_int & 0xFF;\r\n\r\n  const getColor = (n: number) => {\r\n    return (255 - n).toString(16).padStart(2, '0');\r\n  };\r\n\r\n  return `#${getColor(r)}${getColor(g)}${getColor(b)}`;\r\n};\r\n\r\nexport {\r\n  complementaryColor,\r\n};","import React from \"react\";\r\nimport theme from \"@/themes/styled\";\r\nimport { complementaryColor } from \"@/utils/colors\";\r\n\r\ntype ThemeIconProps = {\r\n  backgroundColor: string\r\n  fontColor: string\r\n  onClick: React.MouseEventHandler\r\n}\r\n\r\nconst ThemeIcon = ({ backgroundColor, fontColor, onClick }: ThemeIconProps) => {\r\n  const { styled } = theme;\r\n  const Icon = styled.div`\r\n    overflow: hidden;\r\n    display: flex;\r\n    border: 2px solid ${({ theme }) => complementaryColor(theme.colors.backgroundColor)};\r\n    border-radius: 50%;\r\n    width: 26px;\r\n    height: 26px;\r\n    cursor: pointer;\r\n  `;\r\n  const BackgroundColor = styled.div`\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: ${backgroundColor};\r\n  `;\r\n  const FontColor = styled.div`\r\n    width: 50%;\r\n    height: 100%;\r\n    background-color: ${fontColor};\r\n  `;\r\n\r\n  return (\r\n    <Icon onClick={onClick}>\r\n      <BackgroundColor />\r\n      <FontColor />\r\n    </Icon>\r\n  )\r\n}\r\n\r\nexport default ThemeIcon;\r\n","import { useState } from \"react\";\r\nimport theme from \"@/themes/styled\";\r\nimport themes, { ThemeType } from \"@/themes\";\r\nimport ThemeIcon from \"./icon\";\r\nimport { complementaryColor } from \"@/utils/colors\";\r\n\r\ntype SelectThemeProps = {\r\n  actions: {\r\n    setTheme: Function\r\n  }\r\n}\r\n\r\nconst SelectTheme = ({ actions }: SelectThemeProps) => {\r\n  const { styled } = theme;\r\n  const [theme_list, setThemeList] = useState(Object.entries(themes).slice(1));\r\n  const ThemeIconList = styled.div`\r\n    overflow: hidden;\r\n    position: absolute;\r\n    top: 16px;\r\n    right: 16px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    height: 30px;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    &:hover {\r\n      background-color: ${({ theme }) => complementaryColor(theme.colors.backgroundColor)}22;\r\n      height: ${theme_list.length * 40 - 10}px;\r\n    }\r\n  `;\r\n  const IconContainer = styled.div`\r\n    &:not(:first-of-type) {\r\n      margin-top: 10px;\r\n    }\r\n  `;\r\n\r\n  const onClick = (theme: [string, ThemeType]) => {\r\n    const [key] = theme;\r\n    actions.setTheme(key);\r\n    const temp_list = [...theme_list.filter(([k]) => key !== k)];\r\n    setThemeList([theme, ...temp_list]);\r\n  };\r\n  return (\r\n    <ThemeIconList>\r\n      {theme_list.map((theme) =>\r\n        <IconContainer key={theme[0]}>\r\n          <ThemeIcon\r\n            backgroundColor={theme[1].colors.backgroundColor}\r\n            fontColor={theme[1].colors.fontColor}\r\n            onClick={() => onClick(theme)}\r\n          />\r\n        </IconContainer>\r\n      )}\r\n    </ThemeIconList>\r\n  );\r\n}\r\n\r\nexport default SelectTheme;\r\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport theme from \"@/themes/styled\";\n\nconst Main: React.FC = () => {\n  const { styled } = theme;\n  const MainContainer = styled.div`\n    max-width: 420px;\n    width: 100%;\n  `;\n  // 아래에서 위로 올라오는 효과, opacity 조정\n  const HoverText = styled.div`\n    margin-bottom: 50px;\n    font-size: 36px;\n    font-weight: bold;\n    text-align: center;\n  `;\n  const ButtonContainer = styled.div`\n    display: flex;\n    justify-content: space-evenly;\n  `;\n  const Button = styled(Link)`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100px;\n    height: 100px;\n    border: 2px solid ${({ theme }) => theme.colors.fontColor};\n    border-radius: 5px;\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\n    color: ${({ theme }) => theme.colors.fontColor};\n    text-decoration: none;\n    cursor: pointer;\n    &:hover {\n      background-color: ${({ theme }) => theme.colors.fontColor};\n      color: ${({ theme }) => theme.colors.backgroundColor};\n      box-shadow: 0 0 4px inset ${({ theme }) => theme.colors.backgroundColor};\n    }\n    &:focus {\n      outline: none;\n    }\n    &:not(:first-of-type) {\n      margin-left: 10px;\n    }\n  `;\n\n  const [hover_text, setText] = useState('　');\n  const buttons = [\n    { title: '소개', href: '/introduce', hover: 'I AM' },\n    { title: '프로젝트', href: '/projects', hover: 'PROJECTS' },\n  ];\n  const onMouseEnter = (index: number) => setText(buttons[index].hover);\n  const onMouseLeave = () => setText('　');\n  return (\n    <MainContainer>\n      <HoverText>{hover_text}</HoverText>\n      <ButtonContainer>\n        {buttons.map((btn, i) =>\n          <Button\n            key={`btn-${i}`}\n            to={btn.href}\n            onMouseOver={() => onMouseEnter(i)}\n            onMouseOut={onMouseLeave}\n          >\n            {btn.title}\n          </Button>\n        )}\n      </ButtonContainer>\n    </MainContainer>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\n\nconst MainContainer: React.FC = () => {\n  return (\n    <div>introduce</div>\n  );\n};\n\nexport default MainContainer;\n","import React from \"react\";\r\n\r\nconst Projects: React.FC = () => {\r\n  return (<div>projects</div>);\r\n}\r\n\r\nexport default Projects;\r\n","import * as React from 'react';\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Main from '@/pages/main';\r\nimport Introduce from '@/pages/introduce';\r\nimport Projects from '@/pages/projects';\r\n\r\nconst Router: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" component={Main} exact />\r\n      <Route path=\"/introduce\" component={Introduce} />\r\n      <Route path=\"/projects\" component={Projects} />\r\n      <Redirect path=\"*\" to=\"/\" />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","import { ThemeProvider, ThemeConsumer, ThemeStyleProvider } from \"@/contexts/theme\";\nimport Themes from \"@/themes\";\nimport SelectTheme from \"@/components/theme\";\nimport Router from \"@/router\";\nimport './App.css';\n\ntype ChildProps = {\n  styled: any,\n  state: {\n    theme: string\n  }\n  actions: {\n    setTheme: Function\n  }\n}\n\nconst child = ({ styled, state, actions }: ChildProps) => {\n  const theme = Themes[state.theme] || Themes.Default;\n  const Container = styled.div((props: any) => ({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    height: '100%',\n    backgroundColor: props.theme.colors.backgroundColor,\n    color: props.theme.colors.fontColor,\n  }));\n  return (\n    <>\n      <ThemeStyleProvider theme={theme}>\n        <SelectTheme actions={actions} />\n        <Container>\n          <Router />\n        </Container>\n      </ThemeStyleProvider>\n    </>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider>\n        <ThemeConsumer>{child}</ThemeConsumer>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}